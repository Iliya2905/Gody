import os
import asyncio
import random
import json
from datetime import datetime
from telethon import TelegramClient, events
from telethon.errors import (
    SessionPasswordNeededError,
    FloodWaitError,
    FloodTestPhoneWaitError,
    PhoneNumberBannedError
)
from telethon.tl.types import DocumentAttributeFilename
from telethon.network import ConnectionTcpMTProxyRandomizedIntermediate
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 21150207
API_HASH = "b9b5c3a365804a71325c5a7b6e12378e"
BOT_TOKEN = "7204186933:AAGEY9j4CFhR87y_lLg1NZTwqZFN_A1cP-U"
ADMIN_ID = 1292122024
LOG_CHANNEL_ID = -1002737608934
SPAMBOT_USERNAME = "SpamBot"
MAX_FLOOD_ERRORS = 5

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
CONFIG_DIR = "config"
BASE_DIR = "base"
ACCOUNTS_DIR = "accounts"

# –§–∞–π–ª—ã —Å –Ω–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏
USERNAME_FILE = os.path.join(BASE_DIR, "usernames.txt")
BLACKLIST_FILE = os.path.join(BASE_DIR, "blacklist.txt")
PROXY_CONFIG_FILE = os.path.join(CONFIG_DIR, "proxy_config.json")
BOT_SESSION_FILE = os.path.join(CONFIG_DIR, "bot.session")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
def initialize_folders():
    os.makedirs(CONFIG_DIR, exist_ok=True)
    os.makedirs(BASE_DIR, exist_ok=True)
    os.makedirs(ACCOUNTS_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫
initialize_folders()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ aiogram
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
class BotState:
    def __init__(self):
        self.waiting_for_account = False
        self.waiting_for_delay = False
        self.waiting_for_max = False
        self.current_account = None
        self.current_delay = None
        self.waiting_for_clear_confirmation = False
        self.clear_target = None
        self.clear_attempts = 0
        self.waiting_for_proxy = False
        self.waiting_for_proxy_type = False
        self.waiting_for_proxy_details = False
        self.waiting_for_proxy_remove = False
        self.proxy_type = None
        self.waiting_for_file = False
        self.is_running = False
        self.should_stop = False
        self.waiting_for_session = False
        self.waiting_for_session_remove = False
        self.session_remove_attempts = 0

bot_state = BotState()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def find_session_files():
    return [os.path.join(ACCOUNTS_DIR, f) for f in os.listdir(ACCOUNTS_DIR) 
            if f.endswith('.session') and f != 'bot.session']

def get_available_accounts():
    sessions = find_session_files()
    return [os.path.splitext(os.path.basename(s))[0] for s in sessions]

def read_usernames():
    try:
        with open(USERNAME_FILE, "r", encoding='utf-8') as file:
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        return []

def save_usernames(usernames):
    with open(USERNAME_FILE, "w", encoding='utf-8') as file:
        file.writelines(f"{u}\n" for u in usernames)

def read_blacklist():
    try:
        with open(BLACKLIST_FILE, "r", encoding='utf-8') as file:
            return set(line.strip() for line in file)
    except FileNotFoundError:
        return set()

def save_blacklist(blacklist):
    with open(BLACKLIST_FILE, "w", encoding='utf-8') as file:
        for user in blacklist:
            file.write(f"{user}\n")

def shuffle_usernames():
    usernames = read_usernames()
    random.shuffle(usernames)
    save_usernames(usernames)
    return len(usernames)

def load_proxy_config():
    try:
        with open(PROXY_CONFIG_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_proxy_config(config):
    with open(PROXY_CONFIG_FILE, "w") as f:
        json.dump(config, f, indent=2)

def get_account_proxy(account_name):
    config = load_proxy_config()
    return config.get(account_name)

def set_account_proxy(account_name, proxy_config):
    config = load_proxy_config()
    config[account_name] = proxy_config
    save_proxy_config(config)

def remove_account_proxy(account_name):
    config = load_proxy_config()
    if account_name in config:
        del config[account_name]
        save_proxy_config(config)
        return True
    return False

async def send_to_spambot(client, account_name):
    try:
        await client.send_message(SPAMBOT_USERNAME, '/start')
        await asyncio.sleep(2)
        async for message in client.iter_messages(SPAMBOT_USERNAME, limit=1):
            if "—Å–ø–∞–º-–±–ª–æ–∫–∏—Ä–æ–≤–∫—É" in message.text.lower():
                await message.click(text="No, I'll behave")
                return True
    except Exception as e:
        print(f"Error sending to SpamBot: {str(e)}")
    return False

async def run_sender(bot_client, account_name, delay=3, max_messages=0):
    proxy_config = get_account_proxy(account_name)
    session_path = os.path.join(ACCOUNTS_DIR, f"{account_name}.session")
    client = TelegramClient(session_path, API_ID, API_HASH)
    
    try:
        if proxy_config:
            if proxy_config['type'] == 'mtproto':
                client = TelegramClient(
                    session_path, 
                    API_ID, 
                    API_HASH,
                    connection=ConnectionTcpMTProxyRandomizedIntermediate,
                    proxy=(proxy_config['address'], proxy_config['port'], proxy_config['secret'])
                )
            else:
                proxy = {
                    'proxy_type': proxy_config['type'],
                    'addr': proxy_config['address'],
                    'port': proxy_config['port'],
                    'rdns': True
                }
                if 'username' in proxy_config:
                    proxy['username'] = proxy_config['username']
                if 'password' in proxy_config:
                    proxy['password'] = proxy_config['password']
                client = TelegramClient(session_path, API_ID, API_HASH, proxy=proxy)
        
        await client.connect()
        if not await client.is_user_authorized():
            await bot.send_message(LOG_CHANNEL_ID, f"[{datetime.now()}] ‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return 0

        text_to_send = None
        async for message in client.iter_messages('me', limit=1):
            if message.text:
                text_to_send = message.text
                break

        if not text_to_send:
            await bot.send_message(LOG_CHANNEL_ID, f"[{datetime.now()}] ‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–º —É {account_name}")
            return 0

        usernames = read_usernames()
        blacklist = read_blacklist()
        sent_count = 0
        flood_errors = 0
        updated_usernames = usernames[:]
        updated_blacklist = set(blacklist)
        
        bot_state.is_running = True
        bot_state.should_stop = False

        for username in usernames:
            if bot_state.should_stop:
                await bot.send_message(LOG_CHANNEL_ID, 
                    f"[{datetime.now()}] üõë –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}")
                break

            if max_messages > 0 and sent_count >= max_messages:
                break

            if username in updated_blacklist:
                continue

            try:
                user = await client.get_entity(username)

                chat_exists = False
                async for msg in client.iter_messages(user, limit=1):
                    chat_exists = True
                    break

                if chat_exists:
                    updated_blacklist.add(username)
                    updated_usernames.remove(username)
                    log_msg = f"[{datetime.now()}] ‚ùå –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {username}"
                    await bot.send_message(LOG_CHANNEL_ID, log_msg)
                    continue

                await client.send_message(user, text_to_send)
                sent_count += 1
                flood_errors = 0
                updated_blacklist.add(username)
                updated_usernames.remove(username)

                log_msg = f"[{datetime.now()}] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ–ª–±–∞–µ–±—É: {username} (–ê–∫–∫–∞—É–Ω—Ç: {account_name})"
                await bot.send_message(LOG_CHANNEL_ID, log_msg)

            except FloodWaitError as e:
                flood_errors += 1
                log_msg = f"[{datetime.now()}] ‚ö†Ô∏è –ï–±—É—á–∏–π —Å–ø–∞–º–±–ª–æ–∫ ({flood_errors}/{MAX_FLOOD_ERRORS}): {username} | –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫"
                await bot.send_message(LOG_CHANNEL_ID, log_msg)
                
                success = await send_to_spambot(client, account_name)
                if success:
                    await bot.send_message(LOG_CHANNEL_ID, 
                        f"[{datetime.now()}] üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω /start –≤ –µ–±—É—á–∏–π @SpamBot (–ê–∫–∫–∞—É–Ω—Ç: {account_name})")
                
                if flood_errors >= MAX_FLOOD_ERRORS:
                    log_msg = (f"[{datetime.now()}] üõë –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –µ–±—É—á–µ–≥–æ —Å–ø–∞–º–±–ª–æ–∫–∞! "
                              f"–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ—Å–ª–µ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π (–ê–∫–∫–∞—É–Ω—Ç: {account_name})")
                    await bot.send_message(LOG_CHANNEL_ID, log_msg)
                    break
                
                await asyncio.sleep(e.seconds + 5)
                continue
                
            except Exception as e:
                error_msg = str(e)
                if "Too many requests" in error_msg:
                    flood_errors += 1
                    log_msg = f"[{datetime.now()}] ‚ö†Ô∏è –ï–±—É—á–∏–π —Å–ø–∞–º–±–ª–æ–∫ ({flood_errors}/{MAX_FLOOD_ERRORS}): {username}"
                    await bot.send_message(LOG_CHANNEL_ID, log_msg)
                    success = await send_to_spambot(client, account_name)
                    if success:
                        await bot.send_message(LOG_CHANNEL_ID, 
                            f"[{datetime.now()}] üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω /start –≤ @SpamBot (–ê–∫–∫–∞—É–Ω—Ç: {account_name})")
                    if flood_errors >= MAX_FLOOD_ERRORS:
                        log_msg = (f"[{datetime.now()}] üõë –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫ –µ–±—É—á–µ–≥–æ —Å–ø–∞–º–±–ª–æ–∫–∞! "
                                  f"–ë–ª—è—Ç—å... –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ—Å–ª–µ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π (–ê–∫–∫–∞—É–Ω—Ç: {account_name})")
                        await bot.send_message(LOG_CHANNEL_ID, log_msg)
                        break
                    await asyncio.sleep(delay * 2)
                    continue
                elif "ALLOW_PAYMENT_REQUIRED" in error_msg:
                    updated_blacklist.add(username)
                    updated_usernames.remove(username)
                    log_msg = f"[{datetime.now()}] üí∞ –£ –ø–∏–¥–æ—Ä–∞ {username} –≤–∫–ª—é—á–µ–Ω—ã –ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –£–µ–±–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã"
                    await bot.send_message(LOG_CHANNEL_ID, log_msg)
                elif "No user has" in error_msg and "as username" in error_msg:
                    updated_blacklist.add(username)
                    updated_usernames.remove(username)
                    log_msg = f"[{datetime.now()}] ‚ùå –î–æ–ª–±–∞–µ–±–∞ —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º: {username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã"
                    await bot.send_message(LOG_CHANNEL_ID, log_msg)
                else:
                    log_msg = f"[{datetime.now()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–ª–±–∞–µ–±—É: {username} ({error_msg})"
                    await bot.send_message(LOG_CHANNEL_ID, log_msg)

            await asyncio.sleep(delay)

        save_usernames(updated_usernames)
        save_blacklist(updated_blacklist)
        return sent_count

    except Exception as e:
        await bot.send_message(LOG_CHANNEL_ID, 
            f"[{datetime.now()}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ {account_name}: {str(e)}")
        return 0
    finally:
        bot_state.is_running = False
        bot_state.should_stop = False
        await client.disconnect()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –±–∞–∑—É")
    )
    builder.row(
        KeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É"),
        KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É")
    )
    builder.row(
        KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
        KeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    )
    builder.row(
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"),
        KeyboardButton(text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏")
    )
    return builder.as_markup(resize_keyboard=True)

def get_proxy_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data="add_proxy"),
        InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data="remove_proxy")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏", callback_data="list_proxies"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return builder.as_markup()

def get_sessions_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="add_session"),
        InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="remove_session")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π", callback_data="list_sessions"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return builder.as_markup()

def get_accounts_keyboard(action):
    accounts = get_available_accounts()
    builder = InlineKeyboardBuilder()
    for acc in accounts:
        builder.row(InlineKeyboardButton(text=acc, callback_data=f"{action}:{acc}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

def get_proxy_type_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîµ SOCKS5", callback_data="proxy_type:socks5"),
        InlineKeyboardButton(text="üü¢ HTTP", callback_data="proxy_type:http"),
        InlineKeyboardButton(text="üü£ MTProto", callback_data="proxy_type:mtproto")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

def get_confirmation_keyboard(target):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm:{target}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_clear")
    )
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π –≤ Telegram\n\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    usernames_count = len(read_usernames())
    blacklist_count = len(read_blacklist())
    accounts_count = len(get_available_accounts())
    proxies_count = len(load_proxy_config())
    
    stats_text = (
        f"üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º–æ–≤ –¥–æ–ª–±–∞–µ–±–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {usernames_count}\n"
        f"‚Ä¢ –í –±–ª–µ–∫–ª–∏—Å—Ç–µ –¥–æ–ª–±–∞–µ–±–æ–≤: {blacklist_count}\n"
        f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n"
        f"‚Ä¢ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {proxies_count}"
    )
    
    await message.answer(stats_text)
@dp.message(F.text == "üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –±–∞–∑—É")
async def shuffle_base(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    count = shuffle_usernames()
    await message.answer(f"üîÄ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞!\n–í—Å–µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤: {count}")

@dp.message(F.text == "üì§ –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É")
async def add_base(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
        
    bot_state.waiting_for_file = True
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .txt —Ñ–∞–π–ª —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏\n\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
        "username1\n"
        "username2\n"
        "username3\n"
        "...\n\n"
        "‚ö†Ô∏è –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(F.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É")
async def clear_base(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É —é–∑–µ—Ä–Ω–µ–π–º–æ–≤?",
        reply_markup=get_confirmation_keyboard("base")
    )

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_sending(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    accounts = get_available_accounts()
    if not accounts:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    await message.answer(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_accounts_keyboard("select_account")
    )

@dp.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def stop_sending(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    if not bot_state.is_running:
        await message.answer("‚ÑπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        return
    
    bot_state.should_stop = True
    await message.answer("üõë –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
async def proxy_settings(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:",
        reply_markup=get_proxy_keyboard()
    )

@dp.message(F.text == "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏")
async def sessions_management(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer(
        "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=get_sessions_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message(F.document)
async def handle_document(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    file_name = message.document.file_name
    file_extension = os.path.splitext(file_name)[1].lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    if bot_state.waiting_for_session and file_extension == '.session':
        try:
            await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –µ–±–∞–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏...")
            os.makedirs(ACCOUNTS_DIR, exist_ok=True)
            dest_path = os.path.join(ACCOUNTS_DIR, file_name)
            await bot.download(message.document, destination=dest_path)
            
            bot_state.waiting_for_session = False
            await message.answer(
                f"‚úÖ –°–µ—Å—Å–∏—è {file_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–∞–ø–∫—É accounts!",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {str(e)}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏
    if bot_state.waiting_for_file and file_extension == '.txt':
        try:
            await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –µ–±–∞–Ω–Ω—ã–π —Ñ–∞–π–ª...")
            temp_file = f"temp_{file_name}"
            await bot.download(message.document, destination=temp_file)

            with open(temp_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            new_users = []
            existing_users = set(read_usernames())
            duplicates = 0
            
            for line in lines:
                username = line.strip()
                if username:
                    if username not in existing_users:
                        new_users.append(username)
                        existing_users.add(username)
                    else:
                        duplicates += 1

            if new_users:
                with open(USERNAME_FILE, 'a', encoding='utf-8') as f:
                    f.write('\n'.join(new_users) + '\n')
                
                total_count = len(existing_users)
                await message.answer(
                    f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –¥–æ–ª–±–∞–µ–±–æ–≤: {len(new_users)}\n"
                    f"‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–æ–ª–±–∞–µ–±–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {duplicates}\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–ª–±–∞–µ–±–æ–≤ –≤ –±–∞–∑–µ: {total_count}\n\n"
                    f"üìù –§–∞–π–ª: {file_name}",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer(
                    f"‚ÑπÔ∏è –í—Å–µ —é–∑–µ—Ä–Ω–µ–π–º—ã –∏–∑ —Ñ–∞–π–ª–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}",
                    reply_markup=get_main_keyboard()
                )

            os.remove(temp_file)
            bot_state.waiting_for_file = False

        except UnicodeDecodeError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UTF-8")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            if 'temp_file' in locals() and os.path.exists(temp_file):
                os.remove(temp_file)
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=None
    )
    await callback.message.answer(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "add_proxy")
async def add_proxy_callback(callback: types.CallbackQuery):
    accounts = get_available_accounts()
    if not accounts:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", show_alert=True)
        return

    await callback.message.edit_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:",
        reply_markup=get_accounts_keyboard("add_proxy_to")
    )
    await callback.answer()

@dp.callback_query(F.data == "remove_proxy")
async def remove_proxy_callback(callback: types.CallbackQuery):
    config = load_proxy_config()
    if not config:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏", show_alert=True)
        return

    accounts = list(config.keys())
    builder = InlineKeyboardBuilder()
    for acc in accounts:
        builder.row(InlineKeyboardButton(text=acc, callback_data=f"remove_proxy_from:{acc}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_proxy"))

    await callback.message.edit_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "list_proxies")
async def list_proxies_callback(callback: types.CallbackQuery):
    config = load_proxy_config()
    if not config:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏", show_alert=True)
        return

    reply_text = "üîπ –ê–∫–∫–∞—É–Ω—Ç—ã —Å –ø—Ä–æ–∫—Å–∏:\n\n"
    for account, proxy in config.items():
        reply_text += f"üî∏ {account}:\n"
        reply_text += f"   –¢–∏–ø: {proxy['type']}\n"
        reply_text += f"   –ê–¥—Ä–µ—Å: {proxy['address']}:{proxy['port']}\n"
        if proxy['type'] in ['socks5', 'http']:
            if proxy.get('username'):
                reply_text += f"   –õ–æ–≥–∏–Ω: {proxy['username']}\n"
        if proxy['type'] == 'mtproto':
            reply_text += "   (MTProto —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å–∫—Ä—ã—Ç)\n"
        reply_text += "\n"

    await callback.message.edit_text(
        reply_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_proxy")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_proxy")
async def back_to_proxy(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:",
        reply_markup=get_proxy_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("add_proxy_to:"))
async def select_account_for_proxy(callback: types.CallbackQuery):
    account_name = callback.data.split(":")[1]
    bot_state.current_account = account_name
    bot_state.waiting_for_proxy_type = True
    
    await callback.message.edit_text(
        f"üîπ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_name}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:",
        reply_markup=get_proxy_type_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("proxy_type:"))
async def select_proxy_type(callback: types.CallbackQuery):
    if not bot_state.waiting_for_proxy_type:
        await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    
    proxy_type = callback.data.split(":")[1]
    bot_state.proxy_type = proxy_type
    bot_state.waiting_for_proxy_type = False
    bot_state.waiting_for_proxy_details = True
    
    example = ""
    if proxy_type == 'mtproto':
        example = "proxy.example.com 443 d41d8cd98f00b204e9800998ecf8427e"
    else:
        example = "proxy.example.com 1080 mylogin mypassword"
    
    await callback.message.edit_text(
        f"üîπ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø—Ä–æ–∫—Å–∏: {proxy_type.upper()}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<–∞–¥—Ä–µ—Å> <–ø–æ—Ä—Ç> {'<—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á>' if proxy_type == 'mtproto' else '<–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>'}\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n{example}\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        reply_markup=None
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_proxy_from:"))
async def remove_proxy_from_account(callback: types.CallbackQuery):
    account_name = callback.data.split(":")[1]
    if remove_account_proxy(account_name):
        await callback.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
    else:
        await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}", show_alert=True)
    
    await callback.message.edit_text(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:",
        reply_markup=get_proxy_keyboard()
    )

@dp.callback_query(F.data.startswith("select_account:"))
async def select_account_for_sending(callback: types.CallbackQuery):
    account_name = callback.data.split(":")[1]
    bot_state.current_account = account_name
    
    await callback.message.edit_text(
        f"üîπ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_name}\n"
        "‚è± –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        reply_markup=None
    )
    await callback.answer()
    bot_state.waiting_for_delay = True

@dp.callback_query(F.data == "add_session")
async def add_session_callback(callback: types.CallbackQuery):
    bot_state.waiting_for_session = True
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ (.session)\n\n"
        "‚ö†Ô∏è –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .session",
        reply_markup=None
    )
    await callback.answer()

@dp.callback_query(F.data == "remove_session")
async def remove_session_callback(callback: types.CallbackQuery):
    sessions = find_session_files()
    if not sessions:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for session in sessions:
        builder.row(InlineKeyboardButton(
            text=os.path.basename(session),
            callback_data=f"remove_session:{os.path.basename(session)}"
        ))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_sessions"))

    await callback.message.edit_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "list_sessions")
async def list_sessions_callback(callback: types.CallbackQuery):
    sessions = find_session_files()
    if not sessions:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π", show_alert=True)
        return

    reply_text = "üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n"
    for i, session in enumerate(sessions):
        reply_text += f"{i+1}. {os.path.basename(session)}\n"
    
    await callback.message.edit_text(
        reply_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_sessions")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_sessions")
async def back_to_sessions(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=get_sessions_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_session:"))
async def remove_session_handler(callback: types.CallbackQuery):
    session_name = callback.data.split(":")[1]
    session_path = os.path.join(ACCOUNTS_DIR, session_name)
    
    try:
        os.remove(session_path)
        await callback.answer(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}", show_alert=True)
    
    await callback.message.edit_text(
        "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=get_sessions_keyboard()
    )

@dp.callback_query(F.data.startswith("confirm:"))
async def confirm_clear(callback: types.CallbackQuery):
    target = callback.data.split(":")[1]
    
    try:
        if target == "base":
            with open(USERNAME_FILE, 'w', encoding='utf-8') as f:
                f.write('')
            await callback.answer("‚úÖ –ë–∞–∑–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
        elif target == "blacklist":
            with open(BLACKLIST_FILE, 'w', encoding='utf-8') as f:
                f.write('')
            await callback.answer("‚úÖ –ë–ª–µ–∫–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", show_alert=True)
    
    await callback.message.edit_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=None
    )
    await callback.message.answer(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "cancel_clear")
async def cancel_clear(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=None
    )
    await callback.message.answer(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_text(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
    if bot_state.waiting_for_delay:
        try:
            delay = int(message.text)
            if delay < 1:
                await message.answer("‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã")
                return
                
            bot_state.current_delay = delay
            bot_state.waiting_for_delay = False
            bot_state.waiting_for_max = True
            await message.answer(
                f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {delay} —Å–µ–∫\n"
                "üî¢ –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel"
            )
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    elif bot_state.waiting_for_max:
        try:
            max_messages = int(message.text)
            if max_messages < 0:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ")
                return
                
            log_msg = (
                f"[{datetime.now()}] üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞:\n"
                f"- –ê–∫–∫–∞—É–Ω—Ç: {bot_state.current_account}\n"
                f"- –ó–∞–¥–µ—Ä–∂–∫–∞: {bot_state.current_delay} —Å–µ–∫\n"
                f"- –õ–∏–º–∏—Ç: {max_messages}"
            )
            sent_log = await bot.send_message(LOG_CHANNEL_ID, log_msg)
            await sent_log.pin()
            
            await message.answer(
                f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!\n\n"
                f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç: {bot_state.current_account}\n"
                f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {bot_state.current_delay} —Å–µ–∫\n"
                f"‚Ä¢ –õ–∏–º–∏—Ç: {max_messages if max_messages > 0 else '–Ω–µ—Ç'}",
                reply_markup=get_main_keyboard()
            )
            
            sent_count = await run_sender(
                bot,
                bot_state.current_account,
                delay=bot_state.current_delay,
                max_messages=max_messages
            )
            
            await bot.send_message(LOG_CHANNEL_ID, 
                f"[{datetime.now()}] üõë –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            await message.answer(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π",
                reply_markup=get_main_keyboard()
            )
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            bot_state.current_account = None
            bot_state.current_delay = None
            bot_state.waiting_for_delay = False
            bot_state.waiting_for_max = False
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
    elif bot_state.waiting_for_proxy_details and bot_state.current_account and bot_state.proxy_type:
        try:
            parts = message.text.split()
            if len(parts) < 2:
                raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç")
            
            proxy_config = {
                'type': bot_state.proxy_type,
                'address': parts[0],
                'port': int(parts[1])
            }
            
            if bot_state.proxy_type == 'mtproto':
                if len(parts) < 3:
                    raise ValueError("–î–ª—è MTProto –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á")
                proxy_config['secret'] = parts[2]
            else:
                if len(parts) >= 3:
                    proxy_config['username'] = parts[2]
                if len(parts) >= 4:
                    proxy_config['password'] = parts[3]
            
            set_account_proxy(bot_state.current_account, proxy_config)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            proxy_info = (
                f"üîπ –¢–∏–ø: {bot_state.proxy_type.upper()}\n"
                f"üìç –ê–¥—Ä–µ—Å: {proxy_config['address']}\n"
                f"üîå –ü–æ—Ä—Ç: {proxy_config['port']}\n"
            )
            
            if bot_state.proxy_type == 'mtproto':
                proxy_info += "üîí –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: [—Å–∫—Ä—ã—Ç–æ]"
            else:
                if 'username' in proxy_config:
                    proxy_info += f"üë§ –õ–æ–≥–∏–Ω: {proxy_config['username']}\n"
                if 'password' in proxy_config:
                    proxy_info += "üîë –ü–∞—Ä–æ–ª—å: [—Å–∫—Ä—ã—Ç–æ]"
            
            await message.answer(
                f"‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–ª—è {bot_state.current_account} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"{proxy_info}",
                reply_markup=get_main_keyboard()
            )
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            bot_state.current_account = None
            bot_state.proxy_type = None
            bot_state.waiting_for_proxy_details = False
            bot_state.waiting_for_proxy_type = False
            
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {str(e)}")
        return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
